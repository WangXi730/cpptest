#pragma once
#include<iostream>
#include<vector>
#include<stack>
#include<algorithm>
#include"InsertSort"
using namespace std;
namespace wx {
	//交换排序
	//冒泡排序
	void BubbleSort(typename vector<int>::iterator left, typename vector<int>::iterator right) {
		for (int i = 0; i < right - left; ++i) {
			for (int j = 0; j < right - left - i - 1; ++j) {
				if (*(left + j) > *(left + j + 1)) {
					int tmp = *(left + j);
					*(left + j) = *(left + j + 1);
					*(left + j + 1) = tmp;
				}
			}
		}
	}

	//取得中间值
	vector<int>::iterator getmiddle(typename vector<int>::iterator left, typename vector<int>::iterator right) {
		vector<int>::iterator mid = left + (right - left) / 2;
		if ((*mid - *left) * (*mid - *right) <= 0) {
			return mid;
		}
		if ((*left - *mid) * (*left - *right) <= 0) {
			return left;
		}
		return right;
	}

	//快速排序
	void QuickSort(typename vector<int>::iterator left, typename vector<int>::iterator right) {
		//先做判断，如果 right-left<=25，我们就采用直接插入排序结束递归，效率比用快排要快
		if (right - left <= 25) {
			Insertsort(left, right);
			return;
		}
		//左边的迭代器left_it
		vector<int>::iterator left_it = left;
		//右边的迭代器right_it
		vector<int>::iterator right_it = right - 1;
		//标记本次快排要排序的key
		vector<int>::iterator key_it = getmiddle(left_it, right_it);
		int key = *key_it;
		if (key_it != right_it) {
			int tmp = *right_it;
			*right_it = *key_it;
			*key_it = tmp;
		}
		//开始排序
		while (left_it != right_it) {
			while (key >= *left_it && left_it < right_it)
				++left_it;
			*right_it = *left_it;
			while (key <= *right_it && left_it < right_it)
				--right_it;
			*left_it = *right_it;
		}
		*left_it = key;
		//一次快排以后，确定了key的位置，接下来，左右各自快排，分而治之
		QuickSort(left, left_it);
		QuickSort(left_it + 1, right);

	}

	//快排，非递归
	void QuickSort_Nor( typename vector<int>::iterator left, typename vector<int>::iterator right) {
		//利用栈空间模拟递归过程
		//创建栈
		stack<vector<int>::iterator> d;
		//左边的迭代器left_it
		vector<int>::iterator left_it = left;
		//右边的迭代器right_it
		vector<int>::iterator right_it = right - 1;
		//入栈左右指针
		d.push(left_it);
		d.push(right_it);
		while (!d.empty()) {
			right_it = d.top();
			right = right_it;
			d.pop();
			left_it = d.top();
			left = left_it;
			d.pop();
			//标记本次快排要排序的key
			vector<int>::iterator key_it = getmiddle(left_it, right_it);
			int key = *key_it;
			if (key_it != right_it) {
				int tmp = *right_it;
				*right_it = *key_it;
				*key_it = tmp;
			}
			//开始排序
			while (left_it < right_it) {
				while (*left_it <= key && left_it < right_it)
					++left_it;
				*right_it = *left_it;
				while (*right_it >= key && left_it < right_it)
					--right_it;
				*left_it = *right_it;
			}
			//赋值
			*left_it = key;
			//接下来入栈左右，判断是否需要继续
			if (left < left_it) {
				d.push(left);
				d.push(left_it - 1);
			}
			if (right_it < right) {
				d.push(right_it + 1);
				d.push(right);
			}
		}

	}

}